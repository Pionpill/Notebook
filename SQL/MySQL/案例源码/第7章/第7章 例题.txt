【例7.1】在book表中的year_publication字段上建立普通索引，SQL语句如下：
CREATE TABLE book
(
bookid            	INT NOT NULL,
bookname          	VARCHAR(255) NOT NULL,
authors            	VARCHAR(255) NOT NULL,
info               	VARCHAR(255) NULL,
comment           	VARCHAR(255) NULL,
year_publication   	YEAR NOT NULL,
INDEX(year_publication)
);
该语句执行完毕之后，使用SHOW CREATE TABLE查看表结构：
 SHOW CREATE table book \G

 explain select * from book where year_publication=1990 \G
【例7.2】创建一个表t1，在表中的id字段上使用UNIQUE关键字创建唯一索引。
CREATE TABLE t1
(
id    INT NOT NULL,
name CHAR(30) NOT NULL,
UNIQUE INDEX UniqIdx(id)
);
该语句执行完毕之后，使用SHOW CREATE TABLE查看表结构：
 SHOW CREATE table t1 \G

【例7.3】创建一个表t2，在表中的name字段上创建单列索引。
表结构如下：
CREATE TABLE t2
(
id   INT NOT NULL,
name CHAR(50) NULL,
INDEX SingleIdx(name(20))
);
该语句执行完毕之后，使用SHOW CREATE TABLE查看表结构：
 SHOW CREATE table t2 \G
【例7.4】创建表t3，在表中的id、name和age字段上建立组合索引，SQL语句如下：
CREATE TABLE t3
(
id    INT NOT NULL,
name CHAR(30) 　NOT NULL,
age  INT NOT　 NULL,
info VARCHAR(255),
INDEX MultiIdx(id, name, age(100))
);
该语句执行完毕之后，使用SHOW CREATE TABLE查看表结构：
 SHOW CREATE table t3 \G

在t3表中，查询id和name字段，使用EXPLAIN语句查看索引的使用情况：
 explain select * from t3 where id=1 AND name='joe' \G
【例7.5】创建表t4，在表中的info字段上建立全文索引，SQL语句如下：
CREATE TABLE t4
(
id    INT NOT NULL,
name CHAR(30) NOT NULL,
age  INT NOT NULL,
info VARCHAR(255),
FULLTEXT INDEX FullTxtIdx(info)
) ENGINE=MyISAM;
因为MySQL5.6中默认存储引擎为InnoDB，在这里创建表时需要修改表的存储引擎为MyISAM，不然创建索引会出错。
语句执行完毕之后，使用SHOW CREATE TABLE查看表结构：
 SHOW CREATE table t4 \G

【例7.6】创建表t5，在空间类型为GEOMETRY的字段上创建空间索引，SQL语句如下：
CREATE TABLE t5
( g GEOMETRY NOT NULL, SPATIAL INDEX spatIdx(g) )ENGINE=MyISAM;
该语句执行完毕之后，使用SHOW CREATE TABLE查看表结构：
 SHOW CREATE table t5 \G
【例7.7】在book表中的bookname字段上建立名为BkNameIdx的普通索引，SQL语句如下：
ALTER TABLE book ADD INDEX BkNameIdx ( bookname(30) );
添加索引之前，使用SHOW INDEX语句查看指定表中创建的索引：
 SHOW INDEX FROM book \G

下面使用ALTER TABLE 在bookname字段上添加索引，SQL语句如下：
ALTER TABLE book ADD INDEX BkNameIdx( bookname(30) );
使用SHOW INDEX语句查看表中的索引：
 SHOW INDEX FROM book \G

【例7.8】在book表的bookId字段上建立名称为UniqidIdx 的唯一索引，SQL语句如下：
ALTER TABLE book ADD UNIQUE INDEX UniqidIdx ( bookId );
使用SHOW INDEX语句查看表中的索引：
 SHOW INDEX FROM book \G

【例7.9】在book表的comment字段上建立单列索引，SQL语句如下：
ALTER TABLE book ADD INDEX BkcmtIdx ( comment(50) );
使用SHOW INDEX语句查看表中的索引：

【例7.10】在book表的authors和info字段上建立组合索引，SQL语句如下：
ALTER TABLE book ADD INDEX BkAuAndInfoIdx ( authors(20),info(50) );
使用SHOW INDEX语句查看表中的索引：

【例7.11】创建表t6，在t6表上使用ALTER TABLE创建全文索引，SQL语句如下：
首先创建表t6，语句如下：
CREATE TABLE t6
(
id    INT NOT NULL,
info  CHAR(255)
) ENGINE=MyISAM;
注意修改ENGINE参数为MyISAM，MySQL默认引擎InnoDB不支持全文索引。
使用ALTER TABLE语句在info字段上创建全文索引：
ALTER TABLE t6 ADD FULLTEXT INDEX infoFTIdx ( info );
使用SHOW INDEX语句查看索引：
 SHOW index from t6 \G

【例7.12】创建表t7，在t7的空间数据类型字段g上创建名称为spatIdx的空间索引，SQL语句如下：
CREATE TABLE t7 ( g GEOMETRY NOT NULL )ENGINE=MyISAM;
使用ALTER TABLE在表t7的g字段建立空间索引：
ALTER TABLE t7 ADD SPATIAL INDEX spatIdx(g);
使用SHOW INDEX语句查看索引：
 SHOW index from t7 \G

2．使用CREATE INDEX创建索引
CREATE INDEX语句可以在已经存在的表上添加索引，MySQL中CREATE INDEX被映射到一个ALTER TABLE语句上，基本语法结构为：
CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name
ON table_name (col_name[length],…) [ASC | DESC]
可以看到CREATE INDEX语句和ALTER INDEX语句的语法基本一样，只是关键字不同。
在这里，使用相同的表book，假设该表中没有任何索引值，创建book表语句如下：
CREATE TABLE book
(
bookid          	INT NOT NULL,
bookname        	VARCHAR(255) NOT NULL,
authors           	VARCHAR(255) NOT NULL,
info              	VARCHAR(255) NULL,
comment          	VARCHAR(255) NULL,
year_publication   	YEAR NOT NULL
);
提示：读者可以将该数据库中的book表删除，按上面的语句重新建立，然后进行下面的操作。
【例7.13】在book表中的bookname字段上建立名为BkNameIdx的普通索引，SQL语句如下：
CREATE INDEX BkNameIdx ON book(bookname);
语句执行完毕之后，将在book表中创建名称为BkNameIdx的普通索引。读者可以使用SHOW INDEX或者SHOW CREATE TABLE语句查看book表中的索引，其索引内容与前面介绍相同。
【例7.14】在book表的bookId字段上建立名称为UniqidIdx 的唯一索引，SQL语句如下：
CREATE UNIQUE INDEX UniqidIdx  ON book ( bookId );
语句执行完毕之后，将在book表中创建名称为UniqidIdx 的唯一索引。
【例7.15】在book表的comment字段上建立单列索引，SQL语句如下：
CREATE INDEX BkcmtIdx ON book(comment(50) );
语句执行完毕之后，将在book表的comment字段上建立一个名为BkcmtIdx的单列索引，长度为50。
【例7.16】在book表的authors和info字段上建立组合索引，SQL语句如下：
CREATE INDEX BkAuAndInfoIdx ON book ( authors(20),info(50) );
语句执行完毕之后，将在book表的authors和info字段上建立了一个名为BkAuAndInfoIdx的组合索引，authors的索引序号为1，长度为20，info的索引序号为2，长度为50。
【例7.17】删除表t6，重新建立表t6，在t6表中使用CREATE INDEX语句，在CHAR类型的info字段上创建全文索引，SQL语句如下：
首先删除表t6，并重新建立该表，分别输入下面语句：
 drop table t6;
Query OK, 0 rows affected (0.00 sec)

 CREATE TABLE t6
     (
     id    INT NOT NULL,
     info  CHAR(255)
     ) ENGINE=MyISAM;
Query OK, 0 rows affected (0.00 sec)
使用CREATE INDEX在t6表的info字段上创建名称为infoFTIdx的全文索引：
CREATE FULLTEXT INDEX ON t6(info);
语句执行完毕之后，将在t6表中创建名称为infoFTIdx的索引，该索引在info字段上创建，类型为FULLTEXT，允许空值。
【例7.18】删除表t7，重新创建表t7，在t7表中使用CREATE INDEX语句，在空间数据类型字段g上创建名称为spatIdx的空间索引，SQL语句如下：
首先删除表t7，并重新建立该表，分别输入下面语句：
 drop table t7;
Query OK, 0 rows affected (0.00 sec)

 CREATE TABLE t7 ( g GEOMETRY NOT NULL )ENGINE=MyISAM;
Query OK, 0 rows affected (0.00 sec)
使用CREATE INDEX语句在表t7的g字段建立空间索引，
CREATE SPATIAL INDEX spatIdx ON t7 (g);
语句执行完毕之后，将在t7表中创建名称为spatIdx的空间索引，该索引在g字段上创建。
9.3  删除索引
MySQL中删除索引使用ALTER TABLE或者DROP INDEX语句，两者可实现相同的功能，DROP INDEX语句在内部被映射到一个ALTER TABLE语句中。
1．使用ALTER TABLE删除索引
ALTER TABLE删除索引的基本语法格式如下：
ALTER TABLE table_name DROP INDEX index_name;
【例7.19】删除book表中的名称为UniqidIdx的唯一索引，SQL语
句如下：
首先查看book表中是否有名称为UniqidIdx的索引，输入SHOW语句如下：
 SHOW CREATE table book \G

2．使用DROP INDEX语句删除索引
DROP INDEX删除索引的基本语法格式如下：
DROP INDEX index_name ON table_name;
【例7.20】删除book表中名称为BkAuAndInfoIdx的组合索引，SQL语句如下：
 DROP INDEX BkAuAndInfoIdx ON book;
